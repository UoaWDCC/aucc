/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import { relations, sql } from '@payloadcms/db-postgres/drizzle'
import {
  foreignKey,
  index,
  integer,
  jsonb,
  numeric,
  pgEnum,
  pgTable,
  serial,
  timestamp,
  uniqueIndex,
  varchar,
} from '@payloadcms/db-postgres/drizzle/pg-core'

export const enum_events_status = pgEnum('enum_events_status', [
  'draft',
  'published',
  'archived',
])
export const enum_events_event_type = pgEnum('enum_events_event_type', [
  'trip',
  'other',
])
export const enum_trip_reports_status = pgEnum('enum_trip_reports_status', [
  'draft',
  'published',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    prefix: varchar('prefix').default('media'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_extraLarge_url: varchar('sizes_extra_large_url'),
    sizes_extraLarge_width: numeric('sizes_extra_large_width'),
    sizes_extraLarge_height: numeric('sizes_extra_large_height'),
    sizes_extraLarge_mimeType: varchar('sizes_extra_large_mime_type'),
    sizes_extraLarge_filesize: numeric('sizes_extra_large_filesize'),
    sizes_extraLarge_filename: varchar('sizes_extra_large_filename'),
    sizes_doubleExtraLarge_url: varchar('sizes_double_extra_large_url'),
    sizes_doubleExtraLarge_width: numeric('sizes_double_extra_large_width'),
    sizes_doubleExtraLarge_height: numeric('sizes_double_extra_large_height'),
    sizes_doubleExtraLarge_mimeType: varchar(
      'sizes_double_extra_large_mime_type',
    ),
    sizes_doubleExtraLarge_filesize: numeric(
      'sizes_double_extra_large_filesize',
    ),
    sizes_doubleExtraLarge_filename: varchar(
      'sizes_double_extra_large_filename',
    ),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_extra_large_sizes_extra_large_filename_idx: index(
      'media_sizes_extra_large_sizes_extra_large_filename_idx',
    ).on(columns.sizes_extraLarge_filename),
    media_sizes_double_extra_large_sizes_double_extra_large_filename_idx: index(
      'media_sizes_double_extra_large_sizes_double_extra_large_filename_idx',
    ).on(columns.sizes_doubleExtraLarge_filename),
  }),
)

export const rivers = pgTable(
  'rivers',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    grade: numeric('grade').notNull(),
    putIn_latitude: numeric('put_in_latitude').notNull(),
    putIn_longitude: numeric('put_in_longitude').notNull(),
    takeOut_latitude: numeric('take_out_latitude').notNull(),
    takeOut_longitude: numeric('take_out_longitude').notNull(),
    featuredImage: integer('featured_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    description: varchar('description'),
    location: varchar('location'),
    slug: varchar('slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    rivers_featured_image_idx: index('rivers_featured_image_idx').on(
      columns.featuredImage,
    ),
    rivers_slug_idx: uniqueIndex('rivers_slug_idx').on(columns.slug),
    rivers_updated_at_idx: index('rivers_updated_at_idx').on(columns.updatedAt),
    rivers_created_at_idx: index('rivers_created_at_idx').on(columns.createdAt),
  }),
)

export const events = pgTable(
  'events',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    status: enum_events_status('status').notNull().default('draft'),
    startTime: timestamp('start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    endTime: timestamp('end_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    location: varchar('location').notNull(),
    description: jsonb('description'),
    ticketsInformation: jsonb('tickets_information'),
    eventType: enum_events_event_type('event_type').notNull().default('other'),
    river: integer('river_id').references(() => rivers.id, {
      onDelete: 'set null',
    }),
    featuredImage: integer('featured_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    tag: integer('tag_id').references(() => tags.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    events_river_idx: index('events_river_idx').on(columns.river),
    events_featured_image_idx: index('events_featured_image_idx').on(
      columns.featuredImage,
    ),
    events_tag_idx: index('events_tag_idx').on(columns.tag),
    events_updated_at_idx: index('events_updated_at_idx').on(columns.updatedAt),
    events_created_at_idx: index('events_created_at_idx').on(columns.createdAt),
  }),
)

export const trip_reports = pgTable(
  'trip_reports',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    status: enum_trip_reports_status('status').notNull(),
    datePublished: timestamp('date_published', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    relatedEvent: integer('related_event_id').references(() => events.id, {
      onDelete: 'set null',
    }),
    featuredImage: integer('featured_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    content: jsonb('content').notNull(),
    slug: varchar('slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    trip_reports_related_event_idx: index('trip_reports_related_event_idx').on(
      columns.relatedEvent,
    ),
    trip_reports_featured_image_idx: index(
      'trip_reports_featured_image_idx',
    ).on(columns.featuredImage),
    trip_reports_slug_idx: uniqueIndex('trip_reports_slug_idx').on(
      columns.slug,
    ),
    trip_reports_updated_at_idx: index('trip_reports_updated_at_idx').on(
      columns.updatedAt,
    ),
    trip_reports_created_at_idx: index('trip_reports_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const trip_reports_rels = pgTable(
  'trip_reports_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    execsID: integer('execs_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('trip_reports_rels_order_idx').on(columns.order),
    parentIdx: index('trip_reports_rels_parent_idx').on(columns.parent),
    pathIdx: index('trip_reports_rels_path_idx').on(columns.path),
    trip_reports_rels_execs_id_idx: index('trip_reports_rels_execs_id_idx').on(
      columns.execsID,
    ),
    trip_reports_rels_media_id_idx: index('trip_reports_rels_media_id_idx').on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [trip_reports.id],
      name: 'trip_reports_rels_parent_fk',
    }).onDelete('cascade'),
    execsIdFk: foreignKey({
      columns: [columns['execsID']],
      foreignColumns: [execs.id],
      name: 'trip_reports_rels_execs_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'trip_reports_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const execs = pgTable(
  'execs',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    pronouns: varchar('pronouns').notNull(),
    role: varchar('role').notNull(),
    email: varchar('email').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    execs_image_idx: index('execs_image_idx').on(columns.image),
    execs_updated_at_idx: index('execs_updated_at_idx').on(columns.updatedAt),
    execs_created_at_idx: index('execs_created_at_idx').on(columns.createdAt),
  }),
)

export const gallery = pgTable(
  'gallery',
  {
    id: serial('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gallery_image_idx: index('gallery_image_idx').on(columns.image),
    gallery_updated_at_idx: index('gallery_updated_at_idx').on(
      columns.updatedAt,
    ),
    gallery_created_at_idx: index('gallery_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const gallery_rels = pgTable(
  'gallery_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    tagsID: integer('tags_id'),
  },
  (columns) => ({
    order: index('gallery_rels_order_idx').on(columns.order),
    parentIdx: index('gallery_rels_parent_idx').on(columns.parent),
    pathIdx: index('gallery_rels_path_idx').on(columns.path),
    gallery_rels_tags_id_idx: index('gallery_rels_tags_id_idx').on(
      columns.tagsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [gallery.id],
      name: 'gallery_rels_parent_fk',
    }).onDelete('cascade'),
    tagsIdFk: foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'gallery_rels_tags_fk',
    }).onDelete('cascade'),
  }),
)

export const tags = pgTable(
  'tags',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tags_updated_at_idx: index('tags_updated_at_idx').on(columns.updatedAt),
    tags_created_at_idx: index('tags_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      'payload_locked_documents_global_slug_idx',
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      'payload_locked_documents_updated_at_idx',
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      'payload_locked_documents_created_at_idx',
    ).on(columns.createdAt),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    riversID: integer('rivers_id'),
    eventsID: integer('events_id'),
    'trip-reportsID': integer('trip_reports_id'),
    execsID: integer('execs_id'),
    galleryID: integer('gallery_id'),
    tagsID: integer('tags_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(
      columns.parent,
    ),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_rivers_id_idx: index(
      'payload_locked_documents_rels_rivers_id_idx',
    ).on(columns.riversID),
    payload_locked_documents_rels_events_id_idx: index(
      'payload_locked_documents_rels_events_id_idx',
    ).on(columns.eventsID),
    payload_locked_documents_rels_trip_reports_id_idx: index(
      'payload_locked_documents_rels_trip_reports_id_idx',
    ).on(columns['trip-reportsID']),
    payload_locked_documents_rels_execs_id_idx: index(
      'payload_locked_documents_rels_execs_id_idx',
    ).on(columns.execsID),
    payload_locked_documents_rels_gallery_id_idx: index(
      'payload_locked_documents_rels_gallery_id_idx',
    ).on(columns.galleryID),
    payload_locked_documents_rels_tags_id_idx: index(
      'payload_locked_documents_rels_tags_id_idx',
    ).on(columns.tagsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    riversIdFk: foreignKey({
      columns: [columns['riversID']],
      foreignColumns: [rivers.id],
      name: 'payload_locked_documents_rels_rivers_fk',
    }).onDelete('cascade'),
    eventsIdFk: foreignKey({
      columns: [columns['eventsID']],
      foreignColumns: [events.id],
      name: 'payload_locked_documents_rels_events_fk',
    }).onDelete('cascade'),
    'trip-reportsIdFk': foreignKey({
      columns: [columns['trip-reportsID']],
      foreignColumns: [trip_reports.id],
      name: 'payload_locked_documents_rels_trip_reports_fk',
    }).onDelete('cascade'),
    execsIdFk: foreignKey({
      columns: [columns['execsID']],
      foreignColumns: [execs.id],
      name: 'payload_locked_documents_rels_execs_fk',
    }).onDelete('cascade'),
    galleryIdFk: foreignKey({
      columns: [columns['galleryID']],
      foreignColumns: [gallery.id],
      name: 'payload_locked_documents_rels_gallery_fk',
    }).onDelete('cascade'),
    tagsIdFk: foreignKey({
      columns: [columns['tagsID']],
      foreignColumns: [tags.id],
      name: 'payload_locked_documents_rels_tags_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      'payload_preferences_updated_at_idx',
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      'payload_preferences_created_at_idx',
    ).on(columns.createdAt),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      'payload_preferences_rels_users_id_idx',
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      'payload_migrations_updated_at_idx',
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      'payload_migrations_created_at_idx',
    ).on(columns.createdAt),
  }),
)

export const events_global = pgTable(
  'events_global',
  {
    id: serial('id').primaryKey(),
    headerImage: integer('header_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    petrolCosts: jsonb('petrol_costs').notNull(),
    introText: jsonb('intro_text').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    events_global_header_image_idx: index('events_global_header_image_idx').on(
      columns.headerImage,
    ),
  }),
)

export const trip_reports_global = pgTable(
  'trip_reports_global',
  {
    id: serial('id').primaryKey(),
    headerImage: integer('header_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    introText: jsonb('intro_text').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    trip_reports_global_header_image_idx: index(
      'trip_reports_global_header_image_idx',
    ).on(columns.headerImage),
  }),
)

export const rivers_global = pgTable(
  'rivers_global',
  {
    id: serial('id').primaryKey(),
    headerImage: integer('header_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    introText: jsonb('intro_text').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    rivers_global_header_image_idx: index('rivers_global_header_image_idx').on(
      columns.headerImage,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_rivers = relations(rivers, ({ one }) => ({
  featuredImage: one(media, {
    fields: [rivers.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
}))
export const relations_events = relations(events, ({ one }) => ({
  river: one(rivers, {
    fields: [events.river],
    references: [rivers.id],
    relationName: 'river',
  }),
  featuredImage: one(media, {
    fields: [events.featuredImage],
    references: [media.id],
    relationName: 'featuredImage',
  }),
  tag: one(tags, {
    fields: [events.tag],
    references: [tags.id],
    relationName: 'tag',
  }),
}))
export const relations_trip_reports_rels = relations(
  trip_reports_rels,
  ({ one }) => ({
    parent: one(trip_reports, {
      fields: [trip_reports_rels.parent],
      references: [trip_reports.id],
      relationName: '_rels',
    }),
    execsID: one(execs, {
      fields: [trip_reports_rels.execsID],
      references: [execs.id],
      relationName: 'execs',
    }),
    mediaID: one(media, {
      fields: [trip_reports_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_trip_reports = relations(
  trip_reports,
  ({ one, many }) => ({
    relatedEvent: one(events, {
      fields: [trip_reports.relatedEvent],
      references: [events.id],
      relationName: 'relatedEvent',
    }),
    featuredImage: one(media, {
      fields: [trip_reports.featuredImage],
      references: [media.id],
      relationName: 'featuredImage',
    }),
    _rels: many(trip_reports_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_execs = relations(execs, ({ one }) => ({
  image: one(media, {
    fields: [execs.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_gallery_rels = relations(gallery_rels, ({ one }) => ({
  parent: one(gallery, {
    fields: [gallery_rels.parent],
    references: [gallery.id],
    relationName: '_rels',
  }),
  tagsID: one(tags, {
    fields: [gallery_rels.tagsID],
    references: [tags.id],
    relationName: 'tags',
  }),
}))
export const relations_gallery = relations(gallery, ({ one, many }) => ({
  image: one(media, {
    fields: [gallery.image],
    references: [media.id],
    relationName: 'image',
  }),
  _rels: many(gallery_rels, {
    relationName: '_rels',
  }),
}))
export const relations_tags = relations(tags, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    riversID: one(rivers, {
      fields: [payload_locked_documents_rels.riversID],
      references: [rivers.id],
      relationName: 'rivers',
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: 'events',
    }),
    'trip-reportsID': one(trip_reports, {
      fields: [payload_locked_documents_rels['trip-reportsID']],
      references: [trip_reports.id],
      relationName: 'trip-reports',
    }),
    execsID: one(execs, {
      fields: [payload_locked_documents_rels.execsID],
      references: [execs.id],
      relationName: 'execs',
    }),
    galleryID: one(gallery, {
      fields: [payload_locked_documents_rels.galleryID],
      references: [gallery.id],
      relationName: 'gallery',
    }),
    tagsID: one(tags, {
      fields: [payload_locked_documents_rels.tagsID],
      references: [tags.id],
      relationName: 'tags',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
)
export const relations_events_global = relations(events_global, ({ one }) => ({
  headerImage: one(media, {
    fields: [events_global.headerImage],
    references: [media.id],
    relationName: 'headerImage',
  }),
}))
export const relations_trip_reports_global = relations(
  trip_reports_global,
  ({ one }) => ({
    headerImage: one(media, {
      fields: [trip_reports_global.headerImage],
      references: [media.id],
      relationName: 'headerImage',
    }),
  }),
)
export const relations_rivers_global = relations(rivers_global, ({ one }) => ({
  headerImage: one(media, {
    fields: [rivers_global.headerImage],
    references: [media.id],
    relationName: 'headerImage',
  }),
}))

type DatabaseSchema = {
  enum_events_status: typeof enum_events_status
  enum_events_event_type: typeof enum_events_event_type
  enum_trip_reports_status: typeof enum_trip_reports_status
  users: typeof users
  media: typeof media
  rivers: typeof rivers
  events: typeof events
  trip_reports: typeof trip_reports
  trip_reports_rels: typeof trip_reports_rels
  execs: typeof execs
  gallery: typeof gallery
  gallery_rels: typeof gallery_rels
  tags: typeof tags
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  events_global: typeof events_global
  trip_reports_global: typeof trip_reports_global
  rivers_global: typeof rivers_global
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_rivers: typeof relations_rivers
  relations_events: typeof relations_events
  relations_trip_reports_rels: typeof relations_trip_reports_rels
  relations_trip_reports: typeof relations_trip_reports
  relations_execs: typeof relations_execs
  relations_gallery_rels: typeof relations_gallery_rels
  relations_gallery: typeof relations_gallery
  relations_tags: typeof relations_tags
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_events_global: typeof relations_events_global
  relations_trip_reports_global: typeof relations_trip_reports_global
  relations_rivers_global: typeof relations_rivers_global
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
